#!/usr/bin/env perl
# -*- coding: utf-8 -*-
#
#       repreq.pl
#       
#       Copyright 2011 Jelle <development@smetj.net>
#       
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 3 of the License, or
#       (at your option) any later version.
#       
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#       
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.
#       
#       
use strict;
use warnings;
use Getopt::Long;
use Net::RabbitMQ;
use Sys::Hostname::FQDN qw(fqdn);
use Data::UUID;
use JSON;
use Data::Dumper;
my $version ='0.1';

#Set default values
my %options =	(	"service"	=> '',
			"host"		=> '',
			"broker"	=> 'localhost',
			"exchange"	=> 'moncli_report_requests',
			"key"		=> '',
			"user"		=> 'guest',
			"password"	=> 'guest',
			"repository"	=> ''
			);

GetOptions (	"service=s" 	=> \$options{service},
		"host=s"	=> \$options{host},
		"broker=s"	=> \$options{broker},
		"exchange=s"	=> \$options{exchange},
		"key=s"		=> \$options{key},
		"user=s"	=> \$options{user},
		"password=s"	=> \$options{password},
		"repository=s"	=> \$options{repository},
		"help"		=> \$options{help},
		"h"		=> \$options{help}
		);

if ( defined $options{help} || defined $options{h} ){
	&Help();
	exit(0);
}

if ( $options{service} eq '' || $options{host} eq '' || $options{key} eq '' || $options{repository} eq '' ){
	&Help();
	print "Either service, host, key or repository is missing.\n";
	exit(3);
}

my $doc = &GetDoc(	$options{repository},
			$options{host},
			$options{service},
			);
my ($document,$uuid) = &FillBlancs($doc);
print &SubmitBroker($document,$uuid);

sub SubmitBroker(){
	my $document=shift;
	my $uuid=shift;
	my $mq = Net::RabbitMQ->new();
	$mq->connect($options{broker}, { user => $options{user}, password => $options{password} });
	$mq->channel_open(1);
	$mq->publish(1, $options{key},$document);
	$mq->disconnect();
	return sprintf ( "A new Report Request (%s) has been submitted. Waiting for check results.\n",$uuid);
}
sub FillBlancs(){
	my $doc=shift;
	my $json = decode_json $doc;
	my $ug = new Data::UUID;
	my $uuid = $ug->create();
	$json->{'FQDN'} = fqdn();
	$json->{'UUID'} = $ug->to_string($uuid);
	$json->{'time'} = time();
	$json->{'timezone'} = "CET";
	$json->{'target'} = $options{host};
	return (encode_json $json,$json->{'UUID'});
}
sub GetDoc(){
	my $repo=shift;
	my $host=shift;
	my $service=shift;
	my @json;
	my $file;
	
	if ( -e "$repo/$host/$service" ){
		$file = sprintf ( "%s/%s/%s",$repo,$host,$service );

	}
	elsif ( -e "$repo/.default/$service" ){
		$file = sprintf ( "%s/.default/%s",$repo,$service );
	}
	else{
		$file = "";
	}
	if ( $file eq "" ){
		print "No custom nor default report request found.\n";
		exit 3;
	}
	
	open FH, $file;
	@json = <FH>;
	close FH;
	
	my $json = join ( '',@json);
	return $json;
}
sub Help(){
	print <<HELP

check_moncli $version Copyright 2011 by Jelle Smet development\@smetj.net

Description:

	check_moncli is a Nagios check which facilitates the creation and communication handling of MonCli report requests.
	
Usage:

	check_moncli --broker host_name [--exchange name] [--user] [--password] --key indigo --host host_name --service service_name --repository absolute_path
	
	
Parameters:

	--broker	The hostname of a RabbitMQ broker.
	--exchange	The exchange to which report requests should be submitted.  By default this is moncli_report_requests.
	--user		The username to authenticate against RabbitMQ.
	--password	The password to authenticate against RabbitMQ.
	--key		The name of the Queue on which the Moncli instance you want to reach is listening on.  Most often this is the FQDN of the client.
	--host		The hostname defined in the Nagios service object.
	--service	The name of the service defined in the Nagios service object.
	--repository	The absolute pathname of the report request repository.
	
	
Note:

	The report request repository has following structure:
	
		/some/directory/.default/servicename
		/some/directory/host/servicename
		...
	
	When check_moncli doesn't find a dedicated report request for the defined host and service, it will try to find a report request
	in the .default directory which matches the service.
HELP
}
